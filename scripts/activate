#!/usr/bin/env bash

if [[ -n "$_CLI_ACTIVATED" ]]; then
  printf "Cli is already activated. Please exit the current shell first.\n" >&2
  return 1
fi

nix_version=$(nix --version 2>/dev/null)

if [[ $? -ne 0 ]]; then
  printf "I'm unable to find Nix. Please try installing Nix using \`install_nix\` script.\n" >&2
  return 1
else
  printf "Using $nix_version\n" >&2
fi

inplace=0
private=0

additional_args=()
if [[ $(uname) == "Darwin" ]]; then
  # On Apple Silicon Macs, use Rosetta to emulate x86_64 architecture.
  additional_args=("--option" "system" "x86_64-darwin")
fi

for arg in "$@"; do
    if [ "$arg" = "--inplace" ]; then
      inplace=1
    elif [ "$arg" = "--private" ]; then
      private=1
    else
      additional_args+=("$arg")
    fi
done

package_name="cli_pcp"
if [ "$private" -eq 1 ]; then
  package_name="cli_pcp_private"
fi

read version < "cli/version"
printf "Using cli version '${version}'.\n" >&2

package_path="github:apollo1321/marvin/${version}#${package_name}"

if [ "$inplace" -eq 1 ]; then
  if [[ -n "$_CLI_PATH" ]]; then
    aux=":${PATH}:"
    aux=${aux//:$_CLI_PATH:/:}; aux=${aux#:}; aux=${aux%:}
    printf -v "PATH" '%s' "$aux"
  fi

  export _CLI_PATH="$(nix --experimental-features 'nix-command flakes' build ${additional_args[@]} $package_path --no-link --print-out-paths)/bin"
  export _CLI_VERSION="${version}"
  export PATH="$_CLI_PATH${PATH:+:${PATH}}"
else
  _CLI_ACTIVATED=1 _CLI_VERSION="${version}" nix --experimental-features 'nix-command flakes' shell ${additional_args[@]} $package_path
fi
